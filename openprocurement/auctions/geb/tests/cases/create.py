# -*- coding: utf-8 -*-
import unittest

from openprocurement.auctions.core.tests.base import snitch

from openprocurement.auctions.geb.tests.base import (
    test_auction_data,
    BaseWebTest,
    BaseAuctionWebTest,
)

from openprocurement.auctions.geb.tests.blanks.procedure import (
    create_auction_common,
    create_auction,
    create_auction_invalid_required_fields,
    create_auction_invalid_unsupported_media_type,
    create_auction_invalid_unprocessable_entity_common,
    create_status,
    create_procurementMethod,
    create_submissionMethod,
    create_awardCriteria,
    create_auctionParameters,
    create_all_autogenerated_fields,
    create_invalid_minNumberOfQualifiedBids
)

from openprocurement.auctions.geb.tests.specifications import (
    REQUIRED_SCHEME_DEFINITION
)


class CreateAuctionResourceTest(BaseWebTest):
    initial_data = test_auction_data

    test_create_auction = snitch(create_auction)
    test_create_auction_common = snitch(create_auction_common)


class CreateInvalidAuctionResourceTest(BaseWebTest):
    initial_data = test_auction_data
    resource_name = 'geb'

    test_create_auction_invalid_required_fields = snitch(create_auction_invalid_required_fields)
    test_create_auction_invalid_unsupported_media_type = snitch(create_auction_invalid_unsupported_media_type)
    test_create_auction_invalid_unprocessable_entity_common = snitch(create_auction_invalid_unprocessable_entity_common)


class CreateAuctionWithInvalidFieldsTest(BaseWebTest):
    initial_data = test_auction_data

    test_invalid_minNumberOfQualifiedBids = snitch(create_invalid_minNumberOfQualifiedBids)
    # test_tenderAttempts = snitch(create_invalid_tenderAttempts)
    # test_minimalStep = snitch(test_minimalStep)
    # test_budgetSpent = snitch(test_budgetSpent)
    # test_registrationFee = snitch(test_registrationFee)
    # test_guarantee = snitch(test_guarantee)
    # test_mode = snitch(create_invalid_mode)


class AuctionAutoGenereteFieldsTest(BaseAuctionWebTest):
    initial_data = test_auction_data

    def setUp(self):
        super(AuctionAutoGenereteFieldsTest, self).setUp()
        self.scheme = REQUIRED_SCHEME_DEFINITION

    test_create_procurementMethod = snitch(create_procurementMethod)
    test_create_status = snitch(create_status)
    test_create_submissionMethod = snitch(create_submissionMethod)
    test_create_awardCriteria = snitch(create_awardCriteria)
    test_create_auctionParameters = snitch(create_auctionParameters)
    test_create_existing_field = snitch(create_all_autogenerated_fields)


def suite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(CreateAuctionResourceTest))
    return suite


if __name__ == '__main__':
    unittest.main(defaultTest='suite')
